
//__________________________________________________________________________________
//__________________________________________________________________________________
//
//							
//__________________________________________________________________________________
//__________________________________________________________________________________


DEFINE_ACTION_FUNCTION level_based_scroll_prices BEGIN

 COPY_EXISTING_REGEXP GLOB ~.*\.itm~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
	READ_SHORT 0x1c item_type
	PATCH_IF (%item_type% = 11) BEGIN
	  READ_LONG 0x34 scroll_price
	  READ_LONG 0x64 header_offset
	  READ_SHORT 0x68 header_count
	  READ_LONG 0x6a effect_offset
	  SET spell_level = 0
	  SET scroll_level_price = 0
	  SET can_learn = 0
	  FOR (header = 0; header < header_count ; ++header) BEGIN
		SET this_header = 0
		READ_SHORT (header_offset + (header * 0x38) + 0x1e) effect_count
		READ_SHORT (header_offset + (header * 0x38) + 0x20) effect_index
		FOR (effect = 0; effect < effect_count; ++effect) BEGIN
		  READ_SHORT (effect_offset + (effect_index + effect)* 0x30) opcode
		  PATCH_IF (opcode = 147) AND (this_header = 0) BEGIN
			READ_ASCII (effect_offset + 0x14 + (effect_index + effect)* 0x30) resref_cast
			INNER_PATCH_FILE ~%resref_cast%.spl~ BEGIN
			  READ_SHORT 0x1c type
			  READ_SHORT 0x34 cast_spell_level
			END
			PATCH_IF (type = 1) OR (type = 2) BEGIN // spell scroll
			  SET this_header = 1
			  SET can_learn = 1
			END
		  END
		END
	  END
	  PATCH_IF (can_learn = 1) BEGIN
		SET spell_level = %cast_spell_level%
		SET scroll_level_price = ((%spell_level% ** %scroll_spell_level_exponent%) * %scroll_spell_level_multiplier%)
		WRITE_LONG 0x34 %scroll_level_price%
	  END
	  ELSE BEGIN
		SET new_scroll_price = (%scroll_price% * %scroll_price_multiplier%)
		WRITE_LONG 0x34 %new_scroll_price%
	  END
	END
  END
 BUT_ONLY

END